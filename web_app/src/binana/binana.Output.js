'use strict';var binana={};import{AssertionError,AttributeError,BaseException,DeprecationWarning,Exception,IndexError,IterableError,KeyError,NotImplementedError,RuntimeWarning,StopIteration,UserWarning,ValueError,Warning,__JsIterator__,__PyIterator__,__Terminal__,__add__,__and__,__call__,__class__,__envir__,__eq__,__floordiv__,__ge__,__get__,__getcm__,__getitem__,__getslice__,__getsm__,__gt__,__i__,__iadd__,__iand__,__idiv__,__ijsmod__,__ilshift__,__imatmul__,__imod__,__imul__,__in__,__init__,__ior__,
__ipow__,__irshift__,__isub__,__ixor__,__jsUsePyNext__,__jsmod__,__k__,__kwargtrans__,__le__,__lshift__,__lt__,__matmul__,__mergefields__,__mergekwargtrans__,__mod__,__mul__,__ne__,__neg__,__nest__,__or__,__pow__,__pragma__,__proxy__,__pyUseJsNext__,__rshift__,__setitem__,__setproperty__,__setslice__,__sort__,__specialattrib__,__sub__,__super__,__t__,__terminal__,__truediv__,__withblock__,__xor__,abs,all,any,assert,bool,bytearray,bytes,callable,chr,copy,deepcopy,delattr,dict,dir,divmod,enumerate,
filter,float,getattr,hasattr,input,int,isinstance,issubclass,len,list,map,max,min,object,ord,pow,print,property,py_TypeError,py_iter,py_metatype,py_next,py_reversed,py_typeof,range,repr,round,set,setattr,sorted,str,sum,tuple,zip}from"./org.transcrypt.__runtime__.js";import{OpenFile}from"./binana._utils.shim.js";import*as json from"./binana._utils.shim.js";import*as __module_binana__ from"./binana.js";__nest__(binana,"",__module_binana__);import*as single_pdb_file from"./binana.output.single_pdb_file.js";
import*as log from"./binana.output.log.js";import*as dictionary from"./binana.output.dictionary.js";import*as _directory from"./binana.output._directory.js";export{_directory,single_pdb_file,log,json,OpenFile,dictionary};var __name__="binana.output";export var _openFile=OpenFile;export var write=function(parameters,ligand,receptor,closest,close,hydrophobics,hydrogen_bonds,salt_bridges,pi_pi,pi_cat,electrostatic_energies,flexibility,ligand_atom_types){var json_output=binana.output.dictionary.collect(ligand.filename,
receptor.filename,closest["labels"],close["labels"],hydrophobics["labels"],hydrogen_bonds["labels"],salt_bridges["labels"],pi_pi["labels"],pi_cat["labels"]);var log_output=binana.output.log.collect(parameters,ligand,closest,close,hydrophobics,hydrogen_bonds,salt_bridges,pi_pi,pi_cat,electrostatic_energies,flexibility,ligand_atom_types,json_output);closest["mol"].set_resname("CCN");close["mol"].set_resname("CON");flexibility["mols"]["alpha_helix"].set_resname("ALP");flexibility["mols"]["beta_sheet"].set_resname("BET");
flexibility["mols"]["other_2nd_structure"].set_resname("OTH");flexibility["mols"]["back_bone"].set_resname("BAC");flexibility["mols"]["side_chain"].set_resname("SID");hydrophobics["mol"].set_resname("HYD");hydrogen_bonds["mol"].set_resname("HBN");pi_pi["mols"]["pi_stacking"].set_resname("PIS");pi_pi["mols"]["T_stacking"].set_resname("PIT");pi_cat["mol"].set_resname("PIC");salt_bridges["mol"].set_resname("SAL");ligand.set_resname("LIG");if(parameters.params["output_file"]!="")binana.output.single_pdb_file.write(parameters,
ligand,receptor,closest,close,hydrophobics,hydrogen_bonds,salt_bridges,pi_pi,pi_cat,flexibility,log_output);if(parameters.params["output_json"]!=""){var f=_openFile(parameters.params["output_json"],"w");f.write(json.dumps(json_output,__kwargtrans__({indent:2})));f.close()}if(parameters.params["output_dir"]!="")_directory.make_directory_output(parameters,closest,close,flexibility,hydrophobics,hydrogen_bonds,pi_pi,pi_cat,salt_bridges,ligand,receptor)};

//# sourceMappingURL=binana.output.map